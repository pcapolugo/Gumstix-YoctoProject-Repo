{"name":"Gumstix Yocto Project Repo","tagline":"Create bootable images for your Gumstix COMs","body":"Gumstix Repo Manifests for the Yocto Project Build System\r\n=============================================\r\nThis repository provides Repo manifests to setup the Yocto build system for \r\nsupported Gumstix products.\r\n\r\n***\r\n**Note:**\r\nIf you already have a Yocto Project setup and want only the Gumstix BSP layer, \r\nuse the meta-gumstix repository found here: \r\ngit://github.com/gumstix/meta-gumstix.git.\r\n***\r\n\r\nThe Yocto Project allows the creation of custom linux distributions for embedded\r\nsystems, including Gumstix-based systems.  It is a collection of git\r\nrepositories known as *layers* each of which provides *recipes* to build\r\nsoftware packages as well as configuration information.\r\n\r\nRepo is a tool that enables the management of many git repositories given a \r\nsingle *manifest* file.  Tell repo to fetch a manifest from this repository and\r\nit will fetch the git repositories specified in the manifest and, by doing so,\r\nsetup a Yocto Project build environment for you!\r\n\r\nGetting Started\r\n---------------\r\n**1.  Install Repo.**\r\n\r\nDownload the Repo script:\r\n\r\n    $ curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > repo\r\n\r\nMake it executable:\r\n\r\n    $ chmod a+x repo\r\n\r\nMove it on to your system path:\r\n\r\n    $ sudo mv repo /usr/local/bin/\r\n\r\nIf it is correctly installed, you should see a Usage message when invoked\r\nwith the help flag.\r\n\r\n    $ repo --help\r\n\r\n**2.  Initialize a Repo client.**\r\n\r\nCreate an empty directory to hold your working files:\r\n\r\n    $ mkdir yocto\r\n    $ cd yocto\r\n\r\nTell Repo where to find the manifest:\r\n\r\n    $ repo init -u git://github.com/gumstix/Gumstix-YoctoProject-Repo.git \r\n\r\nA successful initialization will end with a message stating that Repo is\r\ninitialized in your working directory. Your directory should now\r\ncontain a .repo directory where repo control files such as the manifest are\r\nstored but you should not need to touch this directory.\r\n\r\n***\r\n**Note:**\r\nYou can use the **-b** switch to specify the branch of the repository\r\nto use.  We develop on the guaranteed-to-break **dev** branch.  Most people should use\r\nthe **master** branch, which should at least compile.\r\n\r\nThe **-m** switch selects the manifest file (default is *default.xml*).\r\nOur default.xml on **master** is designed to be stable as it *pins*\r\nparticular commits.\r\n\r\nTo test out the bleeding edge, type:\r\n\r\n    $ repo init -u git://github.com/gumstix/Gumstix-YoctoProject-Repo.git -b dev\r\n    $ repo sync\r\n\r\nTo get back to the known stable version, type:\r\n\r\n    $ repo init -u git://github.com/gumstix/Gumstix-YoctoProject-Repo.git -b master\r\n    $ repo sync\r\n\r\nAlso you can get a specific version of Yocto Project:\r\n\r\nFor example,\r\n\r\n    $ repo init -u git://github.com/gumstix/Gumstix-YoctoProject-Repo.git -b refs/tags/danny\r\n    \r\nTo learn more about repo, look at http://source.android.com/source/version-control.html \r\n***\r\n\r\n**3.  Fetch all the repositories:**\r\n\r\n    $ repo sync\r\n\r\nNow go turn on the coffee machine as this may take 20 minutes depending on\r\nyour connection.\r\n\r\n**4.  Initialize the Yocto Project Build Environment.**\r\n\r\n    $ export TEMPLATECONF=meta-gumstix-extras/conf \r\n    $ source ./poky/oe-init-build-env\r\n\r\nThis copies default configuration information into the **poky/build/conf**\r\ndirectory and sets up some environment variables for the build system.  This configuration\r\ndirectory is not under revision control; you may wish to edit these configuration\r\nfiles for your specific setup. In particular, change the `MACHINE` variable in **conf/local.conf** if you are\r\nnot building for the Overo (default).\r\n\r\n**5.  Build an image:**\r\n\r\nThis process downloads several gigabytes of source code and then proceeds to\r\ndo an awful lot of compilation so make sure you have plenty of space (25GB\r\nminimum), and expect a day or so of build time depending on your network\r\nconnection.  Don't worry---it is just the first build that takes a while.\r\n\r\n    $ bitbake gumstix-console-image\r\n\r\nIf everything goes well, you should have a compressed root filesystem\r\ntarball as well as kernel and bootloader binaries available in your\r\n**tmp/deploy/images/{ overo | duovero | pepper }** directory.  If you run into problems, the most likely\r\ncandidate is missing software packages.  Check out\r\nhttp://www.yoctoproject.org/docs/current/yocto-project-qs/yocto-project-qs.html#resources\r\nfor the list of required packages for operating system. Also, take\r\na look to be sure your operating system is supported:\r\nhttps://wiki.yoctoproject.org/wiki/Distribution_Support\r\n\r\n\r\n**6. Create a bootable micro SD card:**\r\n\r\nYou are one step closer to booting your Gumstix with the new image you built! \r\nFirst you have to create two partitions: `boot` and `rootfs`. We have included \r\na small script to help you out with it. Change your directory to \r\n**poky/meta-gumstix-extras/scripts** and you should see a shell script named mk2partsd.\r\nPop in your micro SD card to your card writer, and find out the location of \r\nthe block device by running `dmesg`. Now you can run the script as following:\r\n\r\n    $ sudo ./mk2partsd <block device> \r\n    \r\nIf you get an error, make sure your operating system has not automatically mounted \r\nthe drives. \r\n\r\nOnce this is successful, go ahead and mount both the drives. \r\n\r\n**7. Flash your image:**\r\n\r\nAlmost there. Now you just have to populate the card with the image you built. \r\nGo to the deploy directory as mentioned in step 5:\r\n\r\n    $ cd build/tmp/deploy/images/{overo|duovero|pepper}   \r\n    \r\nWrite the bootloader, kernel and the root file system into your card:\r\n\r\n    $ cp MLO u-boot.img uImage /media/boot \r\n    $ sudo tar xaf gumstix-console-image.tar.bz2 -C /media/rootfs --strip-components=1\r\n\r\nAnd you should make sure all the files are written:\r\n\r\n    $ sync\r\n\r\nHooray you are done!\r\n\r\nStaying Up to Date\r\n------------------\r\nTo pick up the latest changes for all source repositories, run:\r\n\r\n    $ repo sync\r\n\r\nEnter the Yocto Project build environment:\r\n\r\n    $ source poky/oe-init-build-env\r\n\r\n    If you forget to setup these environment variables prior to bitbaking, your \r\n    OS will complain that it can't find bitbake on the path.  Don't try to\r\n    install bitbake using a package manager, just run the above command.\r\n\r\nYou can then rebuild as before:\r\n\r\n    $ bitbake gumstix-console-image\r\n\r\nStarting Fresh\r\n-------------------\r\nSo something broke... what do you do now?\r\n\r\nThere are several degrees of *starting fresh*: individual packages can be \r\nrebuilt or the whole system can be reconstructed.\r\n\r\n 1. clean a package: bitbake <package-name> -c cleansstate\r\n 2. re-download package: bitbake <package-name> -c cleanall\r\n 3. destroy everything but downloads: rm -rf build/sstate-cache build/tmp (or wherever your sstate and work directories are)\r\n 4. destroy it all (not recommended): rm -rf build\r\n\r\n***\r\n**Note:**\r\nIf you've made a change to a recipe and want the package to be rebuilt, just \r\nincrement the recipe version (the PR variable); cleaning is not necessary.\r\n\r\nTo understand better how bitbake processes recipes, look at the excellent \r\ndocumentation:\r\nhttp://www.yoctoproject.org/docs/current/poky-ref-manual/poky-ref-manual.html.\r\n***\r\n\r\nTo make sense of the differences between these cleaning methods, it is useful to\r\n understand that Yocto caches both the downloaded source files for all the \r\npackages it tries to build (the DL_DIR configuration parameter) and the packages\r\nonce built (the SSTATE_DIR configuration parameter). Typically, deleting the\r\ndownloaded source is a bad idea---this just means re-fetching gigabytes of code\r\nwhich wastes network bandwidth. Cleaning the sstate cache for a particular\r\npackage ensures that it actually gets rebuilt from source rather than simply\r\nrestored from the cache.\r\n\r\nCustomize\r\n---------\r\nSooner or later, you'll want to customize some aspect of the image either adding\r\n more packages, picking up some upstream patches, or tweaking your kernel. To\r\nthis, you'll want to customize the Repo manifest to point at different\r\nrepositories and branches or pull in additional meta-layers.\r\n\r\nClone this repository (or fork it on github):\r\n\r\n    $ git clone git://github.com/gumstix/Gumstix-YoctoProject-Repo.git\r\n\r\nMake your changes (and contribute them back if they are generally useful), and\r\nthen re-initialize your repo client\r\n\r\n    $ repo init -u <file:///path/to/your/git/repository.git>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}